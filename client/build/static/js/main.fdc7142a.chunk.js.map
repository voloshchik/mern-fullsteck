{"version":3,"sources":["hooks/http.hook.js","context/AuthContext.js","component/Loader.js","component/LinksList.js","pages/LinksPage.js","pages/CreatePage.js","component/LinkCard.js","pages/DetailPage.js","pages/AuthPage.js","hooks/message.hook.js","component/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Loader","className","LinksList","links","length","map","link","index","key","_id","style","maxWidth","wordWrap","from","to","LinksPage","setLinks","useContext","fetchLinks","Authorization","fetched","useEffect","CreatePage","setLink","auth","history","useHistory","window","M","updateTextFields","pressHandler","event","push","marginTop","id","value","onChange","e","target","placeholder","type","onKeyPress","htmlFor","LinkCard","href","rel","clicks","Date","date","toLocaleDateString","DetailPage","linkId","useParams","getLink","AuthPage","text","toast","html","email","password","form","setForm","changeHadler","name","registerHadler","console","log","loginHadler","disabled","onClick","marginRight","Navbar","padding","preventDefault","App","setToken","setUserId","ready","setReady","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.fdc7142a.chunk.js","sourcesContent":["import React, { useCallback, useState } from 'react';\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = 'null', headers = {}) => {\n    setLoading(true);\n    try {\n      if (body) {\n        body = JSON.stringify(body);\n        headers['Content-type'] = 'application/json';\n      }\n      const response = await fetch(url, { method, body, headers });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Что-то пошло не так!');\n      }\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = useCallback(() => setError(null), []);\n  return { loading, request, error, clearError };\n};\n","import { createContext } from 'react';\n\nfunction noop() {}\nexport const AuthContext = createContext({\n  token: null,\n  userId: null,\n  login: noop,\n  logout: noop,\n  isAuthenticated: false,\n});\n","import React from 'react';\n\nexport const Loader = () => {\n  return (\n    <div>\n      <div className='preloader-wrapper active'>\n        <div className='spinner-layer spinner-red-only'>\n          <div className='circle-clipper left'>\n            <div className='circle'></div>\n          </div>\n          <div className='gap-patch'>\n            <div className='circle'></div>\n          </div>\n          <div className='circle-clipper right'>\n            <div className='circle'></div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const LinksList = ({ links }) => {\n  if (!links.length) {\n    return <p className='center'>Ссылок пока нет!</p>;\n  }\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>№</th>\n            <th>Оригинальная</th>\n            <th>Сокрощенная</th>\n            <th>Открыть</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {links.map((link, index) => {\n            return (\n              <tr key={link._id}>\n                <td>{index + 1}</td>\n                <td style={{ maxWidth: ' 50px', wordWrap: 'break-word' }}>{link.from}</td>\n                <td>{link.to}</td>\n                <td>\n                  <Link to={`/detail/${link._id}`}>Открыть</Link>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from '../context/AuthContext';\nimport { Loader } from '../component/Loader';\nimport { LinksList } from '../component/LinksList';\n\nexport const LinksPage = () => {\n  const [links, setLinks] = useState([]);\n  const { loading, request } = useHttp();\n  const { token } = useContext(AuthContext);\n\n  const fetchLinks = useCallback(async () => {\n    try {\n      const fetched = await request('/api/link', 'GET', null, {\n        Authorization: ` Bearer ${token}`,\n      });\n      setLinks(fetched);\n    } catch (error) {}\n  }, [request, token]);\n\n  useEffect(() => {\n    fetchLinks();\n  }, [fetchLinks]);\n\n  if (loading) {\n    return <Loader />;\n  }\n  return <>{!loading && <LinksList links={links} />}</>;\n};\n","import { useHistory } from 'react-router-dom';\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { AuthContext } from './../context/AuthContext';\nexport const CreatePage = () => {\n  const [link, setLink] = useState('');\n  const { request } = useHttp();\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, []);\n  const pressHandler = async (event) => {\n    if (event.key === 'Enter') {\n      try {\n        const data = await request(\n          '/api/link/generate',\n          'Post',\n          { from: link },\n          { Authorization: `Bear ${auth.token}` }\n        );\n        history.push(`/detail/${data.link._id}`);\n      } catch (error) {}\n    }\n  };\n  return (\n    <div className='row'>\n      <div className='col s8 offset-s2'>\n        <div className='input-field  ' style={{ marginTop: '3rem' }}>\n          <input\n            id='link'\n            value={link}\n            onChange={(e) => setLink(e.target.value)}\n            placeholder='Вставте ссылку'\n            type='text'\n            onKeyPress={pressHandler}\n          />\n          <label htmlFor='link'>Введите ссылку</label>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\nexport const LinkCard = ({ link }) => {\n  return (\n    <div>\n      <h2>Ссылка</h2>\n      <p>\n        Ваша ссылка:\n        <a href={link.to} target='_blank' rel='noopener noreferrer'>\n          {link.to}\n        </a>\n      </p>\n      <p>\n        откуда:\n        <a href={link.from} target='_blank' rel='noopener noreferrer'>\n          {link.from}\n        </a>\n      </p>\n      <p>\n        Количества кликов по ссылке: <strong>{link.clicks}</strong>\n      </p>\n\n      <p>Дата создания ссылки: {new Date(link.date).toLocaleDateString()}</p>\n    </div>\n  );\n};\n","import React, { useCallback, useContext, useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { LinkCard } from '../component/LinkCard';\nimport { Loader } from '../component/Loader';\nimport { AuthContext } from '../context/AuthContext';\nimport { useHttp } from '../hooks/http.hook';\nexport const DetailPage = () => {\n  const linkId = useParams().id;\n  const [link, setLink] = useState(null);\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n\n  const getLink = useCallback(async () => {\n    try {\n      const fetched = await request(`/api/link/${linkId}`, 'GET', null, {\n        Authorization: `Bearer ${token}`,\n      });\n      setLink(fetched);\n    } catch (error) {}\n  }, [token, linkId, request]);\n\n  useEffect(() => {\n    getLink();\n  }, [getLink]);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return <>{!loading && link && <LinkCard link={link} />}</>;\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHttp } from '../hooks/http.hook';\nimport { useMessage } from '../hooks/message.hook';\nimport { AuthContext } from '../context/AuthContext';\n\nexport const AuthPage = () => {\n  const message = useMessage();\n  const auth = useContext(AuthContext);\n  const { request, loading, error, clearError } = useHttp();\n  const [form, setForm] = useState({ email: '', password: '' });\n\n  useEffect(() => {\n    message(error);\n    clearError();\n  }, [error, message, clearError]);\n\n  useEffect(() => {\n    window.M.updateTextFields();\n  }, []);\n  const changeHadler = (event) => {\n    setForm({ ...form, [event.target.name]: event.target.value });\n  };\n\n  const registerHadler = async () => {\n    try {\n      const data = await request('/api/auth/register', 'POST', { ...form });\n      message(data.message);\n      console.log('data', data);\n    } catch (error) {}\n  };\n  const loginHadler = async () => {\n    try {\n      const data = await request('/api/auth/login', 'POST', { ...form });\n      auth.login(data.token, data.id);\n      console.log('data', data);\n      console.log('auth', auth);\n    } catch (error) {}\n  };\n  return (\n    <div className='row'>\n      <div className='col s6 offset-s3'>\n        <h2>Сократи Ссылку</h2>\n        <div className='card blue darken-1'>\n          <div className='card-content white-text'>\n            <span className='card-title'>Авоторизация</span>\n            <div>\n              <div className='input-field '>\n                <input\n                  className='yellow-input'\n                  id='email'\n                  placeholder='Введите email'\n                  type='text'\n                  name='email'\n                  value={form.email}\n                  onChange={changeHadler}\n                />\n                <label htmlFor='email'>Email</label>\n              </div>\n              <div className='input-field '>\n                <input\n                  className='yellow-input'\n                  id='password'\n                  placeholder='Введите пароль'\n                  type='password'\n                  name='password'\n                  value={form.password}\n                  onChange={changeHadler}\n                />\n                <label htmlFor='password'>Password</label>\n              </div>\n            </div>\n          </div>\n          <div className='card-action'>\n            <button\n              disabled={loading}\n              onClick={loginHadler}\n              className='bnt yellow darken-4'\n              style={{ marginRight: 10 }}\n            >\n              Войти\n            </button>\n            <button\n              disabled={loading}\n              onClick={registerHadler}\n              className='bnt gray lighten-1 black-text'\n            >\n              Регистрация\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\n\nexport const useMessage = () => {\n  return useCallback((text) => {\n    if (window.M && text) {\n      window.M.toast({ html: text });\n    }\n  }, []);\n};\n","import React, { useContext } from 'react';\nimport { NavLink, useHistory } from 'react-router-dom';\nimport { AuthContext } from '../context/AuthContext';\n\nexport const Navbar = () => {\n  const auth = useContext(AuthContext);\n  const history = useHistory();\n  const logoutHadler = (e) => {\n    e.preventDefault();\n    auth.logout();\n    history.push('/');\n  };\n  return (\n    <nav>\n      <div className='nav-wrapper blue darken-1' style={{ padding: '0 2rem' }}>\n        <span href='/' className='brand-logo'>\n          Сокращение ссылок\n        </span>\n        <ul id='nav-mobile' className='right hide-on-med-and-down'>\n          <li>\n            <NavLink to='/create'>Создать</NavLink>\n          </li>\n          <li>\n            <NavLink to='/links'>Ccылки</NavLink>\n          </li>\n          <li>\n            <a href='/' onClick={logoutHadler}>\n              Выйти\n            </a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n","import React from 'react';\nimport 'materialize-css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/auth.hook';\nimport { AuthContext } from './context/AuthContext';\nimport { Navbar } from './component/Navbar';\nimport { Loader } from './component/Loader';\nfunction App() {\n  const { login, logout, token, userId, ready } = useAuth();\n\n  const isAuthenticated = !!token;\n  const routes = useRoutes(isAuthenticated);\n\n  if (!ready) {\n    return <Loader />;\n  }\n  return (\n    <AuthContext.Provider\n      value={{\n        login,\n        logout,\n        token,\n        userId,\n        isAuthenticated,\n      }}\n    >\n      <BrowserRouter>\n        {isAuthenticated && <Navbar />}\n        <div className='container'>{routes}</div>\n      </BrowserRouter>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useState, useCallback, useEffect } from 'react';\n\nconst storageName = 'userData';\nexport const useAuth = () => {\n  const [token, setToken] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [ready, setReady] = useState(false);\n  const login = useCallback((jwtToken, id) => {\n    setToken(jwtToken);\n    setUserId(id);\n    localStorage.setItem(\n      storageName,\n      JSON.stringify({\n        userId: id,\n        token: jwtToken,\n      })\n    );\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setUserId(null);\n    localStorage.removeItem(storageName);\n  }, []);\n\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem(storageName));\n    if (data && data.token) {\n      login(data.token, data.userId);\n    }\n    setReady(true);\n  }, [login]);\n\n  return { login, logout, token, userId, ready };\n};\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { LinksPage } from './pages/LinksPage';\n\nimport { CreatePage } from './pages/CreatePage';\nimport { DetailPage } from './pages/DetailPage';\nimport { AuthPage } from './pages/AuthPage';\n\nexport const useRoutes = (isAuthenticated) => {\n  if (isAuthenticated) {\n    return (\n      <Switch>\n        <Route path='/links' exact>\n          <LinksPage />\n        </Route>\n        <Route path='/create'>\n          <CreatePage />\n        </Route>\n        <Route path='/detail/:id'>\n          <DetailPage />\n        </Route>\n        <Redirect to='/create' />\n      </Switch>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path='/' exact>\n        <AuthPage />\n      </Route>\n      <Redirect to='/' />\n    </Switch>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}